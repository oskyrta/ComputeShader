#version 430

const float FLT_MAX = 3.402823466e+38;
const float FLT_MIN = 1.175494351e-38;

#define Buffer_SSBO 0
#define Buffer_Vertices 1
#define Buffer_Indices 2
#define Buffer_VerticesOffsets 3
#define Buffer_TransformedVertices 4
#define Buffer_Matrices 5
#define Buffer_AABBs 6
#define Buffer_PossibleCollisions 7
#define Buffer_Variables 8
#define Buffer_Normals 9
#define Buffer_TransformedNormals 10
#define Buffer_Collisions 11
#define Buffer_Rigidbodies 12

struct Rigidbody {
    float e;
    float rotation;
    float inv_mass;
    float inv_moment_of_inertia;
    
    vec2 position;

    float angular_velocity;
    float torque;

    vec2 velocity;
    vec2 force; 
};

layout( local_size_x = 1, local_size_y = 1 ) in;

layout(std430, binding = Buffer_Matrices) buffer Matrices {
    mat3 matrices[];
};

layout(std430, binding = Buffer_Rigidbodies) buffer Rigidbodies {
    Rigidbody rigidbodies[];
};

uniform float deltatime;

void main() {
    uint i = gl_WorkGroupID.x;

    rigidbodies[i].velocity += rigidbodies[i].force * deltatime;
    rigidbodies[i].angular_velocity += rigidbodies[i].torque * deltatime;

    rigidbodies[i].position += rigidbodies[i].velocity * deltatime;
    rigidbodies[i].rotation += rigidbodies[i].angular_velocity * deltatime;

    float s = sin(rigidbodies[i].rotation);
    float c = cos(rigidbodies[i].rotation);

    matrices[i][0].x =  c; matrices[i][0].y = s; 
    matrices[i][1].x = -s; matrices[i][1].y = c;
    matrices[i][2].x = rigidbodies[i].position.x; 
    matrices[i][2].y = rigidbodies[i].position.y;
    matrices[i][2].z = 1;
}
